#include <Wire.h>  // Include the Wire library for I2C communication.
#include <SPI.h>   // Include the SPI library (not used in this code).
#include <Adafruit_BMP280.h>  // Include the Adafruit_BMP280 library to interact with the BMP280 sensor.

#define BMP280_ADDRESS 0x76  // Define the I2C address of the BMP280 sensor.
Adafruit_BMP280 bmp;  // Create an object 'bmp' of class Adafruit_BMP280 to interact with the BMP280 sensor through I2C.

void setup() {
  Serial.begin(115200);  // Initialize the serial communication with a baud rate of 115200 bps.
  while (!Serial) delay(100);   // Wait for the native USB connection to establish (usually for boards like Arduino Leonardo).

  Serial.println(F("BMP280 test"));  // Print the "BMP280 test" message on the serial monitor.

  unsigned status;
  status = bmp.begin(BMP280_ADDRESS);  // Initialize the BMP280 sensor with the given I2C address.
  if (!status) {  // If the BMP280 sensor is not found or failed to initialize...
    Serial.println(F("Could not find a valid BMP280 sensor, check wiring or try a different address!"));
    Serial.print("SensorID was: 0x"); Serial.println(bmp.sensorID(), 16);  // Print the hexadecimal sensor ID (for debugging).
    Serial.print("        ID of 0xFF probably means a bad address, a BMP 180 or BMP 085\n");
    Serial.print("   ID of 0x56-0x58 represents a BMP 280,\n");
    Serial.print("        ID of 0x60 represents a BME 280.\n");
    Serial.print("        ID of 0x61 represents a BME 680.\n");
    while (1) delay(10);  // Infinite loop if the sensor is not found.
  }

  /* Default settings from the datasheet. */
  bmp.setSampling(Adafruit_BMP280::MODE_NORMAL,     /* Operating Mode. */
                  Adafruit_BMP280::SAMPLING_X2,     /* Temp. oversampling */
                  Adafruit_BMP280::SAMPLING_X16,    /* Pressure oversampling */
                  Adafruit_BMP280::FILTER_X16,      /* Filtering. */
                  Adafruit_BMP280::STANDBY_MS_500); /* Standby time. */
}

void loop() {
    Serial.print(F("Temperature = "));
    Serial.print(bmp.readTemperature());  // Read and print the temperature value in degrees Celsius.
    Serial.println(" *C");

    Serial.print(F("Pressure = "));
    Serial.print(bmp.readPressure());  // Read and print the pressure value in Pascals (Pa).
    Serial.println(" Pa");

    Serial.print(F("Approx altitude = "));
    Serial.print(bmp.readAltitude(1013.25)); /* Adjusted to local forecast! */
    Serial.println(" m");

    Serial.println();
    delay(2000);  // Delay for 2 seconds before repeating the loop.
}
